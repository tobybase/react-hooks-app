{"version":3,"sources":["context/counter-context.js","components/counter-display.js","components/counter-buttons.js","views/counter-view.js","App.js","reportWebVitals.js","index.js"],"names":["CounterContext","createContext","CounterContextProvider","props","useState","count","setCount","Provider","value","children","CounterDisplay","useContext","Statistic","Value","Label","CounterButtons","Button","Group","color","onClick","CounterView","Segment","textAlign","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAEaA,EAAiBC,0BAEjBC,EAAyB,SAAAC,GAClC,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OACI,cAACN,EAAeO,SAAhB,CAAyBC,MAAO,CAACH,EAAOC,GAAxC,SACKH,EAAMM,Y,SCLJ,SAASC,IACpB,MAAgBC,qBAAWX,GAApBK,EAAP,oBAEA,OACI,eAACO,EAAA,EAAD,WACI,cAACA,EAAA,EAAUC,MAAX,UAAkBR,IAClB,cAACO,EAAA,EAAUE,MAAX,yB,aCNG,SAASC,IACtB,MAA0BJ,qBAAWX,GAArC,mBAAOK,EAAP,KAAcC,EAAd,KAUA,OACE,8BACE,eAACU,EAAA,EAAOC,MAAR,WACE,cAACD,EAAA,EAAD,CAAQE,MAAM,QAAQC,QAXV,WAChBb,EAASD,EAAQ,IAUb,iBAGA,cAACW,EAAA,EAAD,CAAQE,MAAM,MAAMC,QAVR,WAChBb,EAASD,EAAQ,IASb,wBCfO,SAASe,IACpB,OACI,eAAC,EAAD,WACI,yCACA,eAACC,EAAA,EAAD,CAASC,UAAU,SAAnB,UACI,cAACZ,EAAD,IACA,cAACK,EAAD,UCRD,SAASQ,IACtB,OACE,eAACC,EAAA,EAAD,WACE,0DACA,cAACJ,EAAD,OCRN,IAYeK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a523c682.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\n\nexport const CounterContext = createContext();\n\nexport const CounterContextProvider = props => {\n    const [count, setCount] = useState(0);\n\n    return (\n        <CounterContext.Provider value={[count, setCount]}>\n            {props.children}\n        </CounterContext.Provider>\n    );\n};\n\n","import React, { useContext } from \"react\";\nimport { Statistic } from \"semantic-ui-react\";\nimport { CounterContext } from \"../context/counter-context\";\n\nexport default function CounterDisplay() {\n    const [count] = useContext(CounterContext);\n\n    return (\n        <Statistic>\n            <Statistic.Value>{count}</Statistic.Value>\n            <Statistic.Label>Counter</Statistic.Label>\n        </Statistic>\n    );\n}","import React, { useContext } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { CounterContext } from \"../context/counter-context\";\n\nexport default function CounterButtons() {\n  const [count, setCount] = useContext(CounterContext);\n\n  const increment = () => {\n    setCount(count + 1)\n  }\n\n  const decrement = () => {\n    setCount(count - 1)\n  }\n\n  return (\n    <div>\n      <Button.Group>\n        <Button color=\"green\" onClick={increment}>\n          Add\n        </Button>\n        <Button color=\"red\" onClick={decrement}>\n          Minus\n        </Button>\n      </Button.Group>\n    </div>\n  );\n}","import React from \"react\";\nimport { Segment } from \"semantic-ui-react\";\nimport { CounterContextProvider } from \"../context/counter-context\";\nimport CounterDisplay from \"../components/counter-display\";\nimport CounterButtons from \"../components/counter-buttons\";\n\nexport default function CounterView() {\n    return (\n        <CounterContextProvider>\n            <h3>Counter</h3>\n            <Segment textAlign=\"center\">\n                <CounterDisplay />\n                <CounterButtons />\n            </Segment>\n        </CounterContextProvider>\n    );\n}","import React from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport CounterView from \"./views/counter-view\";\n\nexport default function App() {\n  return (\n    <Container>\n      <h1>React Hooks Context Demo</h1>\n      <CounterView />\n    </Container>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport 'fomantic-ui-css/semantic.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}